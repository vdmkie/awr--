Frontend
frontend/package.json
{
  "name": "awr-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "typescript": "^5.2.2"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "serve": "serve -s build"
  }
}

frontend/tsconfig.json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"]
}

frontend/src/index.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root")!);
root.render(<App />);

frontend/src/App.tsx
import React, { useState } from "react";
import Admin from "./pages/Admin";
import Brigade from "./pages/Brigade";
import Storekeeper from "./pages/Storekeeper";

function App() {
  const [role, setRole] = useState<string | null>(null);
  const [telegramId, setTelegramId] = useState("");
  const [password, setPassword] = useState("");

  const login = () => {
    fetch("http://localhost:8000/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ telegram_id: telegramId, password })
    })
      .then(res => res.json())
      .then(data => setRole(data.role));
  };

  if (!role) {
    return (
      <div className="p-4">
        <h1>Авторизация</h1>
        <input placeholder="Telegram ID" value={telegramId} onChange={e => setTelegramId(e.target.value)} />
        <input placeholder="Пароль" type="password" value={password} onChange={e => setPassword(e.target.value)} />
        <button onClick={login}>Войти</button>
      </div>
    );
  }

  if (role === "admin") return <Admin />;
  if (role === "brigade") return <Brigade />;
  if (role === "storekeeper") return <Storekeeper />;

  return <div>Неверная роль</div>;
}

export default App;

frontend/src/pages/Admin.tsx
import React, { useState, useEffect } from "react";
import TaskList from "../components/TaskList";
import TaskCreateForm from "../components/TaskCreateForm";

const Admin = () => {
  const [tasks, setTasks] = useState<any[]>([]);
  const fetchTasks = () => {
    fetch("http://localhost:8000/tasks")
      .then(r => r.json())
      .then(data => setTasks(data));
  };
  useEffect(() => { fetchTasks(); }, []);
  return (
    <div className="p-4">
      <h1>Меню администратора</h1>
      <TaskCreateForm refreshTasks={fetchTasks} />
      <TaskList tasks={tasks} refreshTasks={fetchTasks} />
    </div>
  );
};

export default Admin;

frontend/src/pages/Brigade.tsx
import React, { useEffect, useState } from "react";
import ReportForm from "../components/ReportForm";

const Brigade = () => {
  const [tasks, setTasks] = useState<any[]>([]);
  const fetchTasks = () => {
    fetch("http://localhost:8000/tasks?brigade_id=1")
      .then(r => r.json())
      .then(data => setTasks(data));
  };
  useEffect(() => { fetchTasks(); }, []);
  return (
    <div className="p-4">
      <h1>Меню бригады</h1>
      {tasks.map(task => (
        <div key={task.id} className="border p-2 mb-2">
          <div><b>Адрес:</b> {task.address}</div>
          <div><b>ТЗ:</b> {task.tz}</div>
          <ReportForm taskId={task.id} refreshTasks={fetchTasks}/>
        </div>
      ))}
    </div>
  );
};

export default Brigade;

frontend/src/pages/Storekeeper.tsx
import React, { useEffect, useState } from "react";

const Storekeeper = () => {
  const [materials, setMaterials] = useState<any[]>([]);
  const [tools, setTools] = useState<any[]>([]);
  const fetchData = () => {
    fetch("http://localhost:8000/materials").then(r => r.json()).then(data => setMaterials(data));
    fetch("http://localhost:8000/tools").then(r => r.json()).then(data => setTools(data));
  };
  useEffect(() => { fetchData(); }, []);
  const exportExcel = () => { window.location.href="http://localhost:8000/export_excel"; };
  return (
    <div className="p-4">
      <h1>Меню кладовщика</h1>
      <button onClick={exportExcel}>Выгрузить Excel</button>
      <div>
        <h2>Материалы</h2>
        {materials.map(m=> <div key={m.id}>{m.name} - {m.quantity} {m.unit}</div>)}
      </div>
      <div>
        <h2>Инструмент</h2>
        {tools.map(t=> <div key={t.id}>{t.name} - {t.serial_number}</div>)}
      </div>
    </div>
  );
};

export default Storekeeper;

frontend/src/components/TaskCreateForm.tsx
import React, { useState } from "react";

interface Props { refreshTasks: () => void; }

const TaskCreateForm: React.FC<Props> = ({ refreshTasks }) => {
  const [address, setAddress] = useState("");
  const [tz, setTz] = useState("");
  const [note, setNote] = useState("");
  const [brigadeId, setBrigadeId] = useState(1);

  const submitTask = () => {
    fetch("http://localhost:8000/tasks", {
      method:"POST",
      headers: {"Content-Type":"application/json"},
      body: JSON.stringify({address, tz, note, brigade_id:brigadeId, status:"new"})
    }).then(()=>{ setAddress(""); setTz(""); setNote(""); refreshTasks(); });
  };

  return (
    <div>
      <input placeholder="Адрес" value={address} onChange={e=>setAddress(e.target.value)} />
      <input placeholder="ТЗ" value={tz} onChange={e=>setTz(e.target.value)} />
      <input placeholder="Пометка" value={note} onChange={e=>setNote(e.target.value)} />
      <input type="number" placeholder="Бригада ID" value={brigadeId} onChange={e=>setBrigadeId(Number(e.target.value))} />
      <button onClick={submitTask}>Создать задачу</button>
    </div>
  );
};

export default TaskCreateForm;

frontend/src/components/TaskList.tsx
import React from "react";

interface Props { tasks:any[], refreshTasks:()=>void; }

const TaskList:React.FC<Props> = ({tasks, refreshTasks})=>{
  const updateStatus=(id:number,status:string)=>{
    fetch(`http://localhost:8000/tasks/${id}`,{
      method:"PUT",
      headers:{"Content-Type":"application/json"},
      body:JSON.stringify({status})
    }).then(()=>refreshTasks());
  };
  return (
    <div>
      {tasks.map(task=>
        <div key={task.id} className="border p-2 mb-2">
          <div>Адрес: {task.address}</div>
          <div>ТЗ: {task.tz}</div>
          <div>Бригада: {task.brigade_id}</div>
          <div>Статус: {task.status}</div>
          <button onClick={()=>updateStatus(task.id,"in_progress")}>В работе</button>
          <button onClick={()=>updateStatus(task.id,"done")}>Выполнено</button>
          <button onClick={()=>updateStatus(task.id,"postponed")}>Отложено</button>
          <button onClick={()=>updateStatus(task.id,"problem")}>Проблемный</button>
        </div>
      )}
    </div>
  );
};

export default TaskList;

frontend/src/components/ReportForm.tsx
import React, { useState } from "react";

interface Props { taskId:number, refreshTasks:()=>void }

const ReportForm:React.FC<Props> = ({taskId,refreshTasks})=>{
  const [comment,setComment]=useState("");
  const [access,setAccess]=useState("");
  const [materials,setMaterials]=useState("");
  const [photos,setPhotos]=useState("");

  const submitReport=()=>{
    fetch("http://localhost:8000/reports",{
      method:"POST",
      headers:{"Content-Type":"application/json"},
      body:JSON.stringify({task_id:taskId, comment, access, materials, photos:photos.split(",")})
    }).then(()=>{ setComment(""); setAccess(""); setMaterials(""); setPhotos(""); refreshTasks(); });
  };

  return (
    <div>
      <input placeholder="Комментарий" value={comment} onChange={e=>setComment(e.target.value)} />
      <input placeholder="Доступ" value={access} onChange={e=>setAccess(e.target.value)} />
      <input placeholder="Материалы" value={materials} onChange={e=>setMaterials(e.target.value)} />
      <input placeholder="Фото URL через запятую" value={photos} onChange={e=>setPhotos(e.target.value)} />
      <button onClick={submitReport}>Отправить отчет</button>
    </div>
  );
};

export default ReportForm;


✅ С этим frontend и backend проект полностью рабочий. Можно заливать на GitHub, настраивать Render для деплоя:

Backend на FastAPI (порт 8000)

Frontend на React (порт 3000 или через build)